import java.util.Scanner;

public class BullyAlgorithm {
    static boolean[] state = new boolean[5];
    static int coordinator = 5;

    public static void up(int up) {
        if (state[up - 1]) {
            System.out.println("Process " + up + " is already up.");
        } else {
            state[up - 1] = true;
            System.out.println("Process " + up + " is up.");

            // If the newly up process has a higher ID than the current coordinator,
            // initiate an election
            if (up > coordinator) {
                System.out.println("Process " + up + " initiates an election.");
                election(up);
            }
        }
    }

    public static void down(int down) {
        if (!state[down - 1]) {
            System.out.println("Process " + down + " is already down.");
        } else {
            state[down - 1] = false;
            System.out.println("Process " + down + " is down.");
            if (down == coordinator) {
                if (down == coordinator) {
                    System.out.println("Coordinator (Process " + down + ") is down.");
                    // Find highest-numbered alive process to initiate election
                    for (int i = 5; i >= 1; i--) {
                        if (state[i - 1]) {
                            election(i);
                            break;
                        }
                    }
                }
            }
        }
    }

    public static void mess(int mess) {
        if (!state[mess - 1]) {
            System.out.println("Process " + mess + " is down.");
        } else {
            if (mess == coordinator) {
                System.out.println("Coordinator (Process " + coordinator + ") received the message: OK");
            } else {
                System.out.println("Process " + mess + " sends a message.");
            }
        }
    }

    public static void election(int initiator) {
        System.out.println("Election initiated by Process " + initiator);
    
        boolean higherProcessAlive = false;
    
        for (int i = initiator + 1; i <= 5; i++) {
            if (state[i - 1]) {
                System.out.println("Election message sent from Process " + initiator + " to Process " + i);
                higherProcessAlive = true;
            }
        }
    
        if (higherProcessAlive) {
            for (int i = 5; i > initiator; i--) {
                if (state[i - 1]) {
                    coordinator = i;
                    System.out.println("Process " + i + " takes over the election and becomes the new coordinator.");
                    break;
                }
            }
        } else {
            if (state[initiator - 1]) {
                coordinator = initiator;
                System.out.println("No higher process responded. Process " + coordinator + " becomes the new coordinator.");
            } else {
                System.out.println("No higher process responded and initiator is down. No coordinator elected.");
            }
        }
    
        System.out.println("Coordinator message sent from Process " + coordinator + " to all.");
    }
    

    public static void main(String[] args) {
        int choice;
        Scanner sc = new Scanner(System.in);
        for (int i = 0; i < 5; ++i) {
            state[i] = true;
        }
        System.out.println("5 active processes are:");
        System.out.println("Process up  = p1 p2 p3 p4 p5");
        System.out.println("Process 5 is coordinator");
        do {
            System.out.println(".........");
            System.out.println("1. Up a process.");
            System.out.println("2. Down a process.");
            System.out.println("3. Send a message.");
            System.out.println("4. Exit.");
            choice = sc.nextInt();
            switch (choice) {
                case 1: {
                    System.out.println("Bring process up:");
                    int up = sc.nextInt();
                    if (up > 5) {
                        System.out.println("Invalid process number.");
                        break;
                    }
                    up(up);
                    break;
                }
                case 2: {
                    System.out.println("Bring down any process:");
                    int down = sc.nextInt();
                    if (down > 5) {
                        System.out.println("Invalid process number.");
                        break;
                    }
                    down(down);
                    break;
                }
                case 3: {
                    System.out.println("Which process will send message:");
                    int mess = sc.nextInt();
                    if (mess > 5) {
                        System.out.println("Invalid process number.");
                        break;
                    }
                    mess(mess);
                    break;
                }
            }
        } while (choice != 4);
    }
}

---------------------------

RingAlgorithm.java

import java.util.Scanner;
public class RingAlgorithm {
     public static void main(String [] args){
          
        Scanner sc =new Scanner(System.in);
        System.out.println("Enter the total number of all processes :");
        int numberOfProcesses = sc.nextInt();

        Process[] processes =new Process[numberOfProcesses];

        for(int i=0;i<numberOfProcesses;i++){
            processes[i]=new Process(i);
        }

        for(int i=0;i<numberOfProcesses;i++){
            System.out.println("Enter the ID for the process "+(i+1)+": ");
            processes[i].id=sc.nextInt();
        }

        for (int i=0;i<numberOfProcesses-1;i++){
            for(int j=0;j<numberOfProcesses-i-1;j++){
                if(processes[j].id > processes[j+1].id){
                    Process temp=processes[j];
                    processes[j]=processes[j+1];
                    processes[j+1]=temp;
                }
            }
        }

        System.out.println("Processes in the sorted order ");
        for (Process p:processes){
            System.out.println(p.id);
        }


        while(true)
        {
            System.out.println("1. Initate the election.");
            System.out.println("2.Quit");
            int choice=sc.nextInt();

            switch(choice){
                case 1 : {
                    System.out.println("Enter the index of a process which is initiating the election.");
                    int initiatorIndex=sc.nextInt();
                    if(initiatorIndex>=0 && initiatorIndex<numberOfProcesses){
                        initiateElection(processes,initiatorIndex,numberOfProcesses);
                    } else {
                        System.out.println("Invalid Process Index");
                    }
                break; }

                case 2 : {
                    System.out.println("The program is terminated");
                    break;
                }
            }
        }
     }


     public static void initiateElection(Process[] processes, int initiatorIndex,int numberOfProcesses){
        resetElectionFlags(processes);

        int highesID=processes[initiatorIndex].id;
        int currentIndex=initiatorIndex;
        int nextIndex=(currentIndex+1)%numberOfProcesses;

        processes[initiatorIndex].hasSentMessage= true;

        while(nextIndex!=initiatorIndex){
            System.out.println("Process"+processes[currentIndex].id+"has sent message to "+processes[nextIndex].id);
            if(processes[nextIndex].id >highesID){
                highesID=processes[nextIndex].id;
            }

            currentIndex=nextIndex;
            nextIndex=(currentIndex+1)%numberOfProcesses;
        }

        System.out.println("Process"+processes[currentIndex].id+"has sent message to "+processes[nextIndex].id);


        for(Process p:processes){
           if( p.id==highesID){
            p.state="coordinator";
            System.out.println("Process"+(p.index+1)+"(ID"+p.id+") becomes the new coordinator");
           } else {
            p.state="inactive";
           }
        }


    }


    public static void resetElectionFlags(Process[] processes){
        for(Process p:processes){
            p.hasSentMessage=false;
            p.state="active";
        }
    }
}

class Process {
    public int id;
    public boolean hasSentMessage;
    public String state;
    public int index;

    public Process(int index){
        this.index=index;
    }
}


