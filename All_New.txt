Experiment1

AddClient.java

import java.rmi.Naming;

public class AddClient {
    public static void main(String args[]) {
        if (args.length < 3) {
            System.out.println("Usage: java AddClient <server_ip> <num1> <num2>");
            return;
        }

        try {
            String addServerURL = "//" + args[0] + "/AddServer";
            AddServerIntf addServerIntf = (AddServerIntf) Naming.lookup(addServerURL);

            System.out.println("The first number is: " + args[1]);
            double d1 = Double.parseDouble(args[1]);

            System.out.println("The second number is: " + args[2]);
            double d2 = Double.parseDouble(args[2]);

            System.out.println("The sum is: " + addServerIntf.add(d1, d2));
        } catch (Exception e) {
            System.out.println("Exception in main: " + e.getMessage());
            e.printStackTrace();
        }
    }
}


AddServer.java


import java.rmi.Naming;

public class AddServer {
    public static void main(String args[]) {
        try {
            AddServerImpl addServerImpl = new AddServerImpl();
            Naming.rebind("//localhost/AddServer", addServerImpl);
            System.out.println("Server is running...");
        } catch (Exception e) {
            System.out.println("Exception in main: " + e.getMessage());
            e.printStackTrace();
        }
    }
}

AddServerImpl.java

import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;

public class AddServerImpl extends UnicastRemoteObject implements AddServerIntf {
    public AddServerImpl() throws RemoteException {
        super();
    }

    public double add(double d1, double d2) throws RemoteException {
        return d1 + d2;
    }
}

AddServerIntf.java

import java.rmi.Remote;
import java.rmi.RemoteException;

public interface AddServerIntf extends Remote {
    double add(double d1, double d2) throws RemoteException;
}


*********************************************************************************

Experiment2


ReverseClient.java

// Client

import ReverseModule.*;
import org.omg.CosNaming.*;
import org.omg.CosNaming.NamingContextPackage.*;
import org.omg.CORBA.*;
import java.io.*;

class ReverseClient
{
    
    public static void main(String args[])
    {
        Reverse ReverseImpl=null;
        
        try
        {
            org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init(args,null);

	   
            org.omg.CORBA.Object objRef = orb.resolve_initial_references("NameService");
            NamingContextExt ncRef = NamingContextExtHelper.narrow(objRef);
            
            String name = "Reverse";

            ReverseImpl = ReverseHelper.narrow(ncRef.resolve_str(name));

            System.out.println("Enter String=");
            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
            String str= br.readLine();

            String tempStr= ReverseImpl.reverse_string(str);
        
            System.out.println(tempStr);
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }
}


ReverseServer.java

import ReverseModule.Reverse;
import org.omg.CosNaming.*;
import org.omg.CosNaming.NamingContextPackage.*;
import org.omg.CORBA.*;
import org.omg.PortableServer.*;

class ReverseServer
{
    public static void main(String[] args)
    {
        try
        {
            org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init(args,null);

            POA rootPOA = POAHelper.narrow(orb.resolve_initial_references("RootPOA"));
            rootPOA.the_POAManager().activate();

            ReverseImpl rvr = new ReverseImpl();
            
            org.omg.CORBA.Object ref = rootPOA.servant_to_reference(rvr);

            System.out.println("Step1");
            Reverse h_ref = ReverseModule.ReverseHelper.narrow(ref);
            System.out.println("Step2");

            org.omg.CORBA.Object objRef = orb.resolve_initial_references("NameService");

            System.out.println("Step3");
            NamingContextExt ncRef = NamingContextExtHelper.narrow(objRef);
            System.out.println("Step4");

            String name = "Reverse";
            NameComponent path[] = ncRef.to_name(name);
            ncRef.rebind(path,h_ref);

            System.out.println("Reverse Server reading and waiting....");
            orb.run();
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }
}


ReverseImpl.java

import ReverseModule.ReversePOA;
import java.lang.String;
class ReverseImpl extends ReversePOA
{
    ReverseImpl()
    {
        super();
        System.out.println("Reverse Object Created");
    }

    public String reverse_string(String name)
    {
    StringBuffer str=new StringBuffer(name);    
    str.reverse();
        return (("Server Send "+str));
    }
}

ReverseModule.idl

module ReverseModule
{
    interface Reverse
    {
        string reverse_string(in string str);
    };
};



How to run :

Create the all ReverseServer.java , ReverseClient.java , ReverseImpl.java & 
ReverseModule.idl  files. 

Run the IDL-to-Java compiler idlj, on the IDL file to create stubs and skeletons. This step 
assumes that you have included the path to the java/bin directory in your path.
 
1.idlj -fall  ReverseModule.idl 

The idlj compiler generates a number of files. 

Compile the .java files, including the stubs and skeletons (which are in the directory newly 
created directory). This step assumes the java/bin directory is included in your path. 

2. javac *.java  ReverseModule/*.java 

Start orbd. To start orbd from a UNIX command shell, enter : 

3. orbd -ORBInitialPort 1050& 
Start the server. To start the  server from a UNIX command shell, enter : 

4. java ReverseServer -ORBInitialPort 1050& -ORBInitialHost localhost& 

Run the client application : 

5. java ReverseClient -ORBInitialPort 1050 -ORBInitialHost localhost

**************************************************************************

Experiment3

DistribtedSum.java

import mpi.*;

public class DistributedSum {
    public static void main(String[] args) throws MPIException {
        MPI.Init(args);

        int rank = MPI.COMM_WORLD.Rank(); 
        int size = MPI.COMM_WORLD.Size(); 

        int[] array = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; 

        int localSum = 0; 
        int[] recvBuffer = new int[1];

        int startIndex = rank * (array.length / size);
        int endIndex = (rank + 1) * (array.length / size);
        for (int i = startIndex; i < endIndex; i++) {
            localSum += array[i];
        }

        System.out.println("Process " + rank + " intermediate sum: " + localSum);

        MPI.COMM_WORLD.Reduce(new int[]{localSum}, 0, recvBuffer, 0, 1, MPI.INT, MPI.SUM, 0);

        if (rank == 0) {
            System.out.println("Final sum: " + recvBuffer[0]);
        }

        MPI.Finalize();
    }
}



How to run :

#!/bin/bash

# ================================
# Assignment 3 - MPJ Express Setup and Execution
# ================================

# 1. Navigate to project directory (replace with your actual path)
cd ~/Downloads/DSLab/Assignment3 || {
  echo "Directory not found!"; exit 1;
}

# 2. Set MPJ_HOME (update path if needed)
export MPJ_HOME=~/Downloads/mpj-v0_44

# 3. If MPJ not found, download and extract it
if [ ! -d "$MPJ_HOME" ]; then
  echo "MPJ Express not found, downloading..."
  wget https://sourceforge.net/projects/mpjexpress/files/releases/mpj-v0_44.tar.gz -O mpj-v0_44.tar.gz
  tar -xvzf mpj-v0_44.tar.gz -C ~/Downloads
  rm mpj-v0_44.tar.gz
fi

# 4. Compile the Java program
echo "Compiling DistributedSum.java..."
javac -cp "$MPJ_HOME/lib/mpj.jar" DistributedSum.java || {
  echo "Compilation failed!"; exit 1;
}

# 5. Run the program using 4 processes
echo "Running with 4 processes..."
$MPJ_HOME/bin/mpjrun.sh -np 4 DistributedSum

# 6. (Optional) Add MPJ to PATH permanently
if ! grep -q "MPJ_HOME" ~/.bashrc; then
  echo "Adding MPJ_HOME to .bashrc..."
  echo "export MPJ_HOME=$MPJ_HOME" >> ~/.bashrc
  echo "export PATH=\$PATH:\$MPJ_HOME/bin" >> ~/.bashrc
  source ~/.bashrc
fi

echo " Done!"


 To run the script:

chmod +x run_mpj_assignment3.sh
./run_mpj_assignment3.sh



****************************************************************************

Experiment4

Berkeley.java

import java.io.*;
import java.net.*;
import java.util.*;

public class Berkeley {
    static final int PORT = 5000;

    public static void main(String[] args) throws Exception {
        if (args.length > 0 && args[0].equals("client")) {
            runClient(Integer.parseInt(args[1]));
        } else {
            runMaster();
        }
    }

    static void runClient(int id) throws Exception {
        try (ServerSocket serverSocket = new ServerSocket(PORT + id)) {
            System.out.println("Client " + id + " running on port " + (PORT + id));

            Thread.sleep(2000); 

            Socket socket = serverSocket.accept();

            ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
            ObjectInputStream in = new ObjectInputStream(socket.getInputStream());

            long localTime = System.currentTimeMillis();
            out.writeLong(localTime);
            out.flush();

            long offset = in.readLong();
            localTime += offset;
            System.out.println("Client " + id + " adjusted time: " + new Date(localTime));

            socket.close();
        }
    }

    static void runMaster() throws Exception {
        List<Integer> clientPorts = Arrays.asList(PORT + 1, PORT + 2);
        List<Long> clientTimes = new ArrayList<>();
        List<Socket> sockets = new ArrayList<>();
        List<ObjectOutputStream> outputStreams = new ArrayList<>();
        List<ObjectInputStream> inputStreams = new ArrayList<>();

        long masterTime = System.currentTimeMillis();
        clientTimes.add(masterTime);

        for (int port : clientPorts) {
            Socket s = new Socket("localhost", port);
            sockets.add(s);

            ObjectOutputStream out = new ObjectOutputStream(s.getOutputStream());
            out.flush(); // Flush the header immediately
            outputStreams.add(out);
            
            ObjectInputStream in = new ObjectInputStream(s.getInputStream());
            inputStreams.add(in);
            
            long clientTime = in.readLong();
            clientTimes.add(clientTime);
        }

        long avg = clientTimes.stream().mapToLong(Long::longValue).sum() / clientTimes.size();
        long masterOffset = avg - masterTime;

        System.out.println("Master's adjustment: " + masterOffset);
        System.out.println("Adjusted master time: " + new Date(masterTime + masterOffset));

        for (int i = 0; i < sockets.size(); i++) {
            long offset = avg - clientTimes.get(i + 1); 
            outputStreams.get(i).writeLong(offset);
            outputStreams.get(i).flush();
            sockets.get(i).close();
        }
    }
}


***************************************************************************

Experiment5

TokenRing.java

import java.util.Scanner;
public class TokenRing {
    public static void main(String [] args){
        Scanner sc=new Scanner(System.in);

         System.out.println("Enter the number of nodes you want in Ring :");
         int n=sc.nextInt();
        
         System.out.println("The Ring conatins the following nodes");
         for(int i=0;i<n;i++){
            System.out.println(i+" ");

         }
         System.out.println("0");

         int choice=0;
         int token=0;

         do {

            System.out.println("Enter the sender node :");
            int sender=sc.nextInt();

            System.out.println("Enter the receiver node :");
            int receiver=sc.nextInt();

            if(sender<0 || sender>=n || receiver<0 || receiver>=n){
                System.out.println("Invalid nodes you eneterd");
                continue;
            }

            System.out.println("Enetr the data you want to send :");
            int data =sc.nextInt();

            System.out.println("token Passing");
            for(int i=token;i!=sender;i=(i+1)%n){
                System.out.println(i+"->");
            }
            System.out.println(sender);

            System.out.println("Sender"+sender+"send data "+data);

            for(int i= (sender+1)%n;i!=receiver;i=(i+1)%n){
                System.out.println("Data"+data+"is forwarded by the node"+i);
            }
            System.out.println("Data "+data+"is recieved by the "+receiver);

            token=sender;

            System.out.println("Do you want to continue the sending data?? If Yes enter 1 or if NO enter 0");
             choice=sc.nextInt();

         }while(choice==1);
        }
}


******************************************************************************

Experiment6

RingAlgorithm.java


import java.util.Scanner;
public class RingAlgorithm {
     public static void main(String [] args){
          
        Scanner sc =new Scanner(System.in);
        System.out.println("Enter the total number of all processes :");
        int numberOfProcesses = sc.nextInt();

        Process[] processes =new Process[numberOfProcesses];

        for(int i=0;i<numberOfProcesses;i++){
            processes[i]=new Process(i);
        }

        for(int i=0;i<numberOfProcesses;i++){
            System.out.println("Enter the ID for the process "+(i+1)+": ");
            processes[i].id=sc.nextInt();
        }

        for (int i=0;i<numberOfProcesses-1;i++){
            for(int j=0;j<numberOfProcesses-i-1;j++){
                if(processes[j].id > processes[j+1].id){
                    Process temp=processes[j];
                    processes[j]=processes[j+1];
                    processes[j+1]=temp;
                }
            }
        }

        System.out.println("Processes in the sorted order ");
        for (Process p:processes){
            System.out.println(p.id);
        }


        while(true)
        {
            System.out.println("1. Initate the election.");
            System.out.println("2.Quit");
            int choice=sc.nextInt();

            switch(choice){
                case 1 : {
                    System.out.println("Enter the index of a process which is initiating the election.");
                    int initiatorIndex=sc.nextInt();
                    if(initiatorIndex>=0 && initiatorIndex<numberOfProcesses){
                        initiateElection(processes,initiatorIndex,numberOfProcesses);
                    } else {
                        System.out.println("Invalid Process Index");
                    }
                break; }

                case 2 : {
                    System.out.println("The program is terminated");
                    break;
                }
            }
        }
     }


     public static void initiateElection(Process[] processes, int initiatorIndex,int numberOfProcesses){
        resetElectionFlags(processes);

        int highesID=processes[initiatorIndex].id;
        int currentIndex=initiatorIndex;
        int nextIndex=(currentIndex+1)%numberOfProcesses;

        processes[initiatorIndex].hasSentMessage= true;

        while(nextIndex!=initiatorIndex){
            System.out.println("Process"+processes[currentIndex].id+"has sent message to "+processes[nextIndex].id);
            if(processes[nextIndex].id >highesID){
                highesID=processes[nextIndex].id;
            }

            currentIndex=nextIndex;
            nextIndex=(currentIndex+1)%numberOfProcesses;
        }

        System.out.println("Process"+processes[currentIndex].id+"has sent message to "+processes[nextIndex].id);


        for(Process p:processes){
           if( p.id==highesID){
            p.state="coordinator";
            System.out.println("Process"+(p.index+1)+"(ID"+p.id+") becomes the new coordinator");
           } else {
            p.state="inactive";
           }
        }


    }


    public static void resetElectionFlags(Process[] processes){
        for(Process p:processes){
            p.hasSentMessage=false;
            p.state="active";
        }
    }
}

class Process {
    public int id;
    public boolean hasSentMessage;
    public String state;
    public int index;

    public Process(int index){
        this.index=index;
    }
}




BulleyAlgorithm.java

import java.util.Scanner;

public class BullyAlgorithm {
    static boolean[] state = new boolean[5];
    static int coordinator = 5;

    public static void up(int up) {
        if (state[up - 1]) {
            System.out.println("Process " + up + " is already up.");
        } else {
            state[up - 1] = true;
            System.out.println("Process " + up + " is up.");

            // If the newly up process has a higher ID than the current coordinator,
            // initiate an election
            if (up > coordinator) {
                System.out.println("Process " + up + " initiates an election.");
                election(up);
            }
        }
    }

    public static void down(int down) {
        if (!state[down - 1]) {
            System.out.println("Process " + down + " is already down.");
        } else {
            state[down - 1] = false;
            System.out.println("Process " + down + " is down.");
            if (down == coordinator) {
                if (down == coordinator) {
                    System.out.println("Coordinator (Process " + down + ") is down.");
                    // Find highest-numbered alive process to initiate election
                    for (int i = 5; i >= 1; i--) {
                        if (state[i - 1]) {
                            election(i);
                            break;
                        }
                    }
                }
            }
        }
    }

    public static void mess(int mess) {
        if (!state[mess - 1]) {
            System.out.println("Process " + mess + " is down.");
        } else {
            if (mess == coordinator) {
                System.out.println("Coordinator (Process " + coordinator + ") received the message: OK");
            } else {
                System.out.println("Process " + mess + " sends a message.");
            }
        }
    }

    public static void election(int initiator) {
        System.out.println("Election initiated by Process " + initiator);
    
        boolean higherProcessAlive = false;
    
        for (int i = initiator + 1; i <= 5; i++) {
            if (state[i - 1]) {
                System.out.println("Election message sent from Process " + initiator + " to Process " + i);
                higherProcessAlive = true;
            }
        }
    
        if (higherProcessAlive) {
            for (int i = 5; i > initiator; i--) {
                if (state[i - 1]) {
                    coordinator = i;
                    System.out.println("Process " + i + " takes over the election and becomes the new coordinator.");
                    break;
                }
            }
        } else {
            if (state[initiator - 1]) {
                coordinator = initiator;
                System.out.println("No higher process responded. Process " + coordinator + " becomes the new coordinator.");
            } else {
                System.out.println("No higher process responded and initiator is down. No coordinator elected.");
            }
        }
    
        System.out.println("Coordinator message sent from Process " + coordinator + " to all.");
    }
    

    public static void main(String[] args) {
        int choice;
        Scanner sc = new Scanner(System.in);
        for (int i = 0; i < 5; ++i) {
            state[i] = true;
        }
        System.out.println("5 active processes are:");
        System.out.println("Process up  = p1 p2 p3 p4 p5");
        System.out.println("Process 5 is coordinator");
        do {
            System.out.println(".........");
            System.out.println("1. Up a process.");
            System.out.println("2. Down a process.");
            System.out.println("3. Send a message.");
            System.out.println("4. Exit.");
            choice = sc.nextInt();
            switch (choice) {
                case 1: {
                    System.out.println("Bring process up:");
                    int up = sc.nextInt();
                    if (up > 5) {
                        System.out.println("Invalid process number.");
                        break;
                    }
                    up(up);
                    break;
                }
                case 2: {
                    System.out.println("Bring down any process:");
                    int down = sc.nextInt();
                    if (down > 5) {
                        System.out.println("Invalid process number.");
                        break;
                    }
                    down(down);
                    break;
                }
                case 3: {
                    System.out.println("Which process will send message:");
                    int mess = sc.nextInt();
                    if (mess > 5) {
                        System.out.println("Invalid process number.");
                        break;
                    }
                    mess(mess);
                    break;
                }
            }
        } while (choice != 4);
    }
}


**********************************************************************************

Experiment7


ArithmeticOperations.java

package com.calc;

import java.io.*;
import javax.servlet.*;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.*;

@WebServlet("/ArithmeticOperations")
public class ArithmeticOperations extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        response.setContentType("text/html");
        PrintWriter pw = response.getWriter();

        try {
            int no1 = Integer.parseInt(request.getParameter("No1"));
            int no2 = Integer.parseInt(request.getParameter("No2"));
            String operation = request.getParameter("operation");

            pw.println("<html><head><title>Result</title></head><body>");
            pw.println("<h2>Result:</h2>");

            switch (operation) {
                case "add":
                    pw.println("Addition: " + (no1 + no2));
                    break;
                case "sub":
                    pw.println("Subtraction: " + (no1 - no2));
                    break;
                case "mul":
                    pw.println("Multiplication: " + (no1 * no2));
                    break;
                case "div":
                    if (no2 != 0)
                        pw.println("Division: " + (no1 / no2));
                    else
                        pw.println("Division: Cannot divide by zero");
                    break;
                default:
                    pw.println("Invalid operation selected.");
            }

            pw.println("</body></html>");
        } catch (NumberFormatException e) {
            pw.println("<html><body><h2>Error: Please enter valid numbers!</h2></body></html>");
        }
    }
}


index.html


<!DOCTYPE html>
<html>
<head><title>Arithmetic Operations</title></head>
<body>
    <h2>Arithmetic Operation</h2>
    <form method="post" action="ArithmeticOperations">
        Number 1: <input type="text" name="No1"><br><br>
        Number 2: <input type="text" name="No2"><br><br>
        
        Select Operation:<br>
        <input type="radio" name="operation" value="add" checked> Addition<br>
        <input type="radio" name="operation" value="sub"> Subtraction<br>
        <input type="radio" name="operation" value="mul"> Multiplication<br>
        <input type="radio" name="operation" value="div"> Division<br><br>

        <input type="submit" value="Calculate">
    </form>
</body>
</html>


CalculatorWSClient.java

import java.io.*;
import java.net.*;
import java.util.Scanner;

public class CalculatorWSClient {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Accept input from user
        System.out.print("Enter first number: ");
        int num1 = scanner.nextInt();
        System.out.print("Enter second number: ");
        int num2 = scanner.nextInt();
        System.out.print("Enter operation (add, sub, mul, div): ");
        String operation = scanner.next();

        try {
            // Construct the URL for the POST request
            String serviceUrl = "http://localhost:8080/CalculatorWSApplication/ArithmeticOperations";

            // Establish the connection
            URL url = new URL(serviceUrl);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");  // Use POST method
            conn.setDoOutput(true);  // Allow sending data in the request body

            // Prepare the data to send in the body of the POST request
            String data = "No1=" + num1 + "&No2=" + num2 + "&operation=" + operation;

            // Send data
            try (OutputStream os = conn.getOutputStream()) {
                byte[] input = data.getBytes("utf-8");
                os.write(input, 0, input.length);
            }

            // Get the input stream and read the response
            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String inputLine;
            StringBuilder response = new StringBuilder();

            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            in.close();

            // Extract the result from the HTML response
            String result = response.toString();
            String operationResult = result.split("<h2>Result:</h2>")[1].split("</body>")[0].replaceAll("<[^>]*>", "").trim();

            // Print the result
            System.out.println("Result: " + operationResult);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}


************************************************************************************


